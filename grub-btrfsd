#!/usr/bin/env bash

# Copyright (c) 2023 Pascal Jaeger - 2025 Michael Lee Schaecher under the GPL-3.0 license

# This script is a written and designed to be update the GRUB menu when new BTRFS snapshots
# are created. It is designed to be run as a daemon and watches the snapshot directory for
# for any changes.

# Support for Timeshift and Snapper is included.

# shellcheck disable=SC2317
function sign_handler () {

    local _signal; _signal="${1:-SIGINT}"

    if test "${_sysLog}" = "true" ; then


    case "${_signal}" in
        SIGINT|SIGTERM|SIGQUIT  )
            event_log "info" "Received signal: ${_signal}. Stopping ddnsd service..."
        ;;
        *                       )
            event_log "warning" "Received unknown signal: ${_signal}"
        ;;
    esac
    fi

    exit 0

}

function event_log () {

    local _eventType="${1:-info}"
    local _eventMessage="${2:-No message provided}"

    if test "${_sysLog}" = "true" ; then

        case "${_eventType}" in
            info|warning|error|critical )
                logger -t "${_appName}" -p user."${_eventType}" "${_eventMessage}"
            ;;
            *                           )
                logger -t "${_appName}" -p user."${_eventType}" "${_eventMessage}"
            ;;
        esac
    else
        echo "$(date +'%Y-%m-%d %H:%M:%S') [${_eventType}] ${_eventMessage}" >&2
    fi

}


function checks () {

    # check if inotify exists, see issue #227
    ! command -v inotifywait >/dev/null 2>&1 && {
    event_log "error" "Please install inotify-tools and restart the application." >&2 ; exit 1 ;}

    if [ "${_timeshiftAuto}" = "false" ] && [ "${_timeshiftOld}" = "true" ]; then
          event_log "error" "Flag --timeshift-old requires flag --timeshift-auto" >&2
          exit 1
    fi

    if test "${_timeshiftAuto}" = "true" ; then
        for _snapDir in "${_snapDirs[@]}" ; do
            if ! [ -d "${_snapDir}" ]; then
                event_log "error" "No directory found at ${_snapDir}" >&2
                exit 1
            fi
        done
    fi
}

function setup () {

    if test "${#_logFile}" -gt "1" ; then
        touch "${_logFile}" ; echo "GRUB-BTRFSD  event_log $(date)" >> "${_logFile}"
    fi

    if test "${_verboseFlag}" = "true" ; then inotifyQuiet="" ; else inotifyQuiet=" -q -q " ; fi
    if test "${_recursiveFlag}" = "true" ; then inotifyRecursive=" -r " ; else inotifyRecursive="" ; fi

    if test "${_timeshiftAuto}" = "true" ; then
        _watchTime=15
        test -d "/run/timeshift" || mkdir /run/timeshift
    else
        _watchTime=0
    fi

}

function create_grub_menu () {

    #  create the grub submenu of the whole grub menu, depending on whether the submenu already exists
    #  and gives feedback if it worked
    if grep -q "${NAME:-Linux} snapshots" "${GRUB_BTRFS_GRUB_DIRNAME:-/boot/efi/EFI/${ID}}"/grub.cfg; then
    	if /etc/grub.d/41_grub-btrfsd 2> /dev/null ; then
            event_log "info" "Grub submenu created"
        else
            event_log "error" "ERROR: during grub submenu creation!"
        fi
    else
        if ${GRUB_BTRFS_MKCONFIG:-grub-mkconfig} -o "${GRUB_BTRFS_GRUB_DIRNAME:-/boot/efi/EFI/${ID}}"/grub.cfg ; then
            event_log "info" "Grub submenu created"
        else
            event_log "error" "event_logor during grub submenu creation!"
        fi
    fi
}

function set_snapshot_dir () {

    # old timeshift has it's snapshot dir in a different location
    test "${_timeshiftOld}" = "true" && _snapDir="/run/timeshift/backup/timeshift-btrfs/snapshots" ||
    _snapDir="/run/timeshift/${_timeshiftPid}/backup/timeshift-btrfs/snapshots"

}

# shellcheck disable=SC2086
function daemon_function () {

    # start the actual daemon
    _snapDir="${1}"

    while true; do

        _timeshiftPid=$(ps ax | awk '{sub(/.*\//, "", $5)} $5 ~ /timeshift/ {print $1}')

        sleep 1
        [[ "${_timeshiftPid}" == "-2" ]] &&
        { event_log "info" "detected timeshift shutdown" ; wait ; exit 0 ; }

        # For timeshift the grab menu needs to be created in frocked processes.
        if [ ${_timeshiftAuto} = true ] && ! [ "${_timeshiftPid}" -gt 0 ] ; then
            ! set_snapshot_dir || event_log "info" "new snapshots directory is ${_snapDir}"
            (create_grub_menu)
        elif [ ${_timeshiftAuto} = true ] ; then
            event_log "info" "Watching /run/timeshift for timeshift to start"
            inotifywait ${inotifyQuiet} -e create,delete /run/timeshift &&
            {
               _timeshiftPid=$(ps ax | awk '{sub(/.*\//, "", $5)} $5 ~ /timeshift/ {print $1}')
               ! set_snapshot_dir || event_log "info" "new snapshots directory is ${_snapDir}"
               (create_grub_menu)

            }
        fi

        while [ -d "${_snapDir}" ]; do

            event_log "info" "Watching ${_snapDir} for new snapshots..."

            inotifywait ${inotifyQuiet} ${inotifyRecursive} -e create,delete,unmount -t ${_watchTime} ${_snapDir} &&
            {
                event_log "info" "Detected snapshot change in ${_snapDir}."
                create_grub_menu
            }

            sleep 1

        done

        # in case someone deletes the snapshots folder (in snapper mode) to prevent the while loop from going wild
        if ! [ ${_timeshiftAuto} = true ] && ! [ -d "${_snapDir}" ] ; then
            break
        fi
    done
}

# Debugging options
#set -x
set -eo pipefail

_appName="grub-btrfsd"

# init
_timeshiftPid=-1
_watchTime=0
_logFile=0
_timeshiftAuto=false
_timeshiftOld=false
_verboseFlag=false
_sysLog=false
_recursiveFlag=false


# Trap event_logors and event_log them
trap sign_handler SIGINT SIGTERM SIGQUIT

sysConfig="/etc"
grubBtrfsdConfig="${sysConfig}/default/grub-btrfsd"

# shellcheck disable=SC1090
test -f "$grubBtrfsdConfig" && source "${grubBtrfsdConfig}"

# shellcheck disable=SC1091
test -f "${sysConfig}/os-release" && source "${sysConfig}/os-release"

# shellcheck disable=SC1091
test -f "${sysConfig}/default/grub" && source "${sysConfig}/default/grub"

versionInfo="$(cat <<EOF
${_appName} - version - ${GRUB_BTRFS_VERSION}) | Update GRUB when new BTRFS snapshots are created.
Copyright (c) 2023 Pascal Jaeger - 2025 Michael Lee Schaecher under the GPL-3.0 license
EOF
)"


helpInfo="$(cat <<EOF
${versionInfo}

Usage: ${_appName} [OPTIONS]* SNAPSHOTS_DIRS

Optional arguments:
    -l, --log-file          Specify a   event__logFile to write to
    -r, --recursive         Watch snapshots directory recursively
    -s, --sysLog            Write to sysLog
    -o, --timeshift-old     Look for snapshots in directory of Timeshift <v22.06 (requires --timeshift-auto)
    -t, --timeshift-auto    Automatically detect Timeshift snapshots (requires Timeshift)
    -v, --verbose           Let the event_log of the daemon be more _verboseFlag
    -h, --help              Display this message
    -V, --version           Display version information
EOF
)"

# shellcheck disable=SC2221
# shellcheck disable=SC2222
while true ; do case "${1}" in
    -l | --log-file         ) _logFile="${2}"       ; shift 2 ;;
    -r | --recursive        ) _recursiveFlag=true   ; shift   ;;
    -s | --syslog           ) _sysLog=true          ; shift   ;;
    -o | --timeshift-old    ) _timeshiftOld=true    ; shift   ;;
    -t | --timeshift-auto   ) _timeshiftAuto=true   ; shift   ;;
    -v | --verbose          ) _verboseFlag=true     ; shift   ;;
    -h | --help             ) echo "${helpInfo}"    ; exit 0  ;;
    -V | --version          ) echo "${versionInfo}" ; exit 0  ;;
    -*|--*                  )
        echo "Unknown option: ${1}" >&2
        event_log "error" "Unknown option: ${1}" >&2 ; exit 1
    ;;
    *                       ) break                           ;;
esac ; done

_snapDirs=( "${@}" )

checks
setup

if [ "${_timeshiftAuto}" = "true" ] ; then
        daemon_function "timeshift" &
else
    # for all dirs that got passed to the script, start a new fork with that dir
    for _snapDir in "${_snapDirs[@]}" ; do
        event_log "info" "starting daemon watching ${_snapDir}..." ; daemon_function "${_snapDir}"
    done
fi

# wait for forks to finish, kill child forks if SIGTERM is sent
wait ; exit 0
